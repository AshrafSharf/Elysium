// @ts-check
/*
 * This file would normally be generated by the Theia CLI.
 * Pretty awesome stuff.
 */
const path = require("path");
const CopyWebpackPlugin = require("copy-webpack-plugin");

const rootPath = path.resolve(__dirname, "..");
const outputPath = path.resolve(rootPath, "docs");

const development = process.env.NODE_ENV === "development";

const monacoEditorPath = development
    ? path.resolve(rootPath, "node_modules/monaco-editor-core/dev/vs")
    : path.resolve(rootPath, "node_modules/monaco-editor-core/min/vs");
const monacoLanguagesPath = path.resolve(rootPath, "node_modules/monaco-languages/release/min");
const monacoCssLanguagePath = path.resolve(rootPath, "node_modules/monaco-css/release/min");
const monacoJsonLanguagePath = path.resolve(rootPath, "node_modules/monaco-json/release/min");
const monacoHtmlLanguagePath = path.resolve(rootPath, "node_modules/monaco-html/release/min");
const genPath = path.resolve(rootPath, "plugins/**/gen/*.*");

const browserConfig = {
    entry: path.resolve(rootPath, "build/index.js"),
    output: {
        filename: "bundle.js",
        path: outputPath
    },
    target: "web",
    node: {
        fs: "empty",
        child_process: "empty",
        net: "empty",
        crypto: "empty"
    },
    module: {
        rules: [
            {
                test: /\.css$/,
                exclude: /\.useable\.css$/,
                loader: "style-loader!css-loader"
            },
            {
                test: /\.useable\.css$/,
                loader: "style-loader/useable!css-loader"
            },
            {
                test: /\.(ttf|eot|svg)(\?v=\d+\.\d+\.\d+)?$/,
                loader: "url-loader?limit=10000&mimetype=image/svg+xml"
            },
            {
                test: /.(jpg|png|gif)$/,
                loader: "file-loader",
                options: {
                    name: "[path][name].[hash].[ext]",
                }
            },
            {
                // see https://github.com/theia-ide/theia/issues/556
                test: /source-map-support/,
                loader: "ignore-loader"
            },
            {
                test: /\.js$/,
                enforce: "pre",
                loader: "source-map-loader",
                exclude: /jsonc-parser/
            },
            {
                test: /\.woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$/,
                loader: "url-loader?limit=10000&mimetype=application/font-woff"
            },
            {
                test: /node_modules[\\|/](vscode-languageserver-types|vscode-uri|jsonc-parser)/,
                use: { loader: "umd-compat-loader" }
            }
        ]
    },
    resolve: {
        extensions: [".js"],
        alias: {
            "vs": path.resolve(outputPath, monacoEditorPath)
        }
    },
    devtool: "source-map",
    plugins: [
        new CopyWebpackPlugin([
            {
                from: monacoEditorPath,
                to: "vs"
            },
            {
                from: monacoLanguagesPath,
                to: "vs/basic-languages"
            },
            {
                from: monacoCssLanguagePath,
                to: "vs/language/css"
            },
            {
                from: monacoJsonLanguagePath,
                to: "vs/language/json"
            },
            {
                from: monacoHtmlLanguagePath,
                to: "vs/language/html"
            },
            {
                from: path.resolve(rootPath, "build/index.html"),
                to: path.resolve(outputPath, "index.html")
            },
            {
                from: path.resolve(rootPath, "build/favicon.ico"),
                to: path.resolve(outputPath, "favicon.ico")
            }
        ])
    ],
    stats: {
        warnings: true
    }
};

const workerConfig = {
    entry: path.resolve(rootPath, "build/worker.js"),
    output: {
        filename: "bundle.worker.js",
        path: outputPath
    },
    target: "webworker",
    node: {
        fs: "empty",
        child_process: "empty",
        net: "empty",
        crypto: "empty"
    },
    module: {
        rules: []
    },
    resolve: {
        extensions: [".js"]
    },
    devtool: "source-map",
    plugins: [
        new CopyWebpackPlugin([
            {
                from: genPath,
                to: "."
            }
        ])
    ],
    stats: {
        warnings: true
    }
};

module.exports = [browserConfig, workerConfig];